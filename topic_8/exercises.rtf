{\rtf1\ansi\ansicpg1252\cocoartf2706
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww35640\viewh20780\viewkind0
\deftab560
\pard\tx220\tx720\pardeftab560\li720\fi-720\slleading20\partightenfactor0
\ls1\ilvl0
\f0\fs26 \cf0 {\listtext	1.	}Write a simple program that demonstrates concurrency using Future.delayed to simulate asynchronous tasks. Print messages to the console to show the order of execution.\
{\listtext	2.	}Create a computationally intensive function (calculate the factorial of a large number). Run the function in a separate isolate and communicate the result back to the main isolate.\
{\listtext	3.	}Use async-await to chain multiple Future calls and print their results sequentially.\
{\listtext	4.	}Write a function that returns a Future and throws an error. Use catchError to handle the error.\
{\listtext	5.	}Create a simple stream that emit integers with a 1-second delay between emissions. Subscribe to the stream and print each value received.\
{\listtext	6.	}Read values from the stream using the listen method and print them.\
{\listtext	7.	}Create a stream that emits integers and an error. Use the listen method with the onError parameter to handle errors and print the received integers and errors.\
{\listtext	8.	}Subscribe to the first stream, print each value received, and cancel the subscription after receiving 5 values.\
{\listtext	9.	}Use the map and where methods to transform the stream by doubling each integer and filtering out even numbers.\
}